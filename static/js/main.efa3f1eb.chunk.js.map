{"version":3,"sources":["components/EmployeeCard/index.js","components/Title/index.js","components/SearchForm/index.js","App.js","utils/API.js","reportWebVitals.js","index.js"],"names":["EmployeeCard","name","image","phoneNumber","email","className","alt","src","Title","props","children","SearchForm","setNameFilter","type","onChange","event","target","value","console","log","list","placeholder","id","App","useState","employees","setEmployees","fieldToSort","setFieldToSort","sortOrder","setSortOrder","nameFilter","useEffect","count","axios","get","API","then","res","data","results","map","phone","picture","thumbnail","nameFilterRegExp","RegExp","getField","employee","first","last","updateSort","field","onClick","icon","faSort","filter","test","sort","employeeA","employeeB","a","b","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efa3f1eb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeCard({ name, image, phoneNumber, email }) {\r\n  return (\r\n    <tr>\r\n      <td className=\"tableCol\">\r\n        {name}\r\n      </td>\r\n      <td className=\"img-container\">\r\n        <img alt={name} src={image} />\r\n      </td>\r\n      <td className=\"tableCol\">\r\n        {phoneNumber}\r\n      </td>\r\n      <td className=\"tableCol\">\r\n        {email}\r\n      </td>\r\n    </tr>\r\n\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title container-fluid\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchForm({ setNameFilter }) {\r\n\r\n    const handleOnChange = (event) => {\r\n        setNameFilter(event.target.value)\r\n        console.log(event.target.value)\r\n    }\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"form-group searchDiv\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={handleOnChange}\r\n                    name=\"search\"\r\n                    list=\"term\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search by name or email\"\r\n                    id=\"term\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","import './App.css';\r\nimport * as API from \"./utils/API\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport EmployeeCard from \"./components/EmployeeCard\";\r\nimport Title from \"./components/Title\";\r\nimport SearchForm from \"./components/SearchForm\";\r\n\r\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nfunction App() {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [fieldToSort, setFieldToSort] = useState('name.first');\r\n  const [sortOrder, setSortOrder] = useState(-1);\r\n  const [nameFilter, setNameFilter] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    API.getPeople()\r\n      .then((res) => res.data.results)\r\n      .then((data) => data.map(({ name, phone, email, picture }) => ({\r\n        name,\r\n        phone,\r\n        email,\r\n        image: picture.thumbnail\r\n      })))\r\n      .then(setEmployees);\r\n  }, []);\r\n  const nameFilterRegExp = new RegExp(nameFilter, \"i\")\r\n  const getField = (employee) => {\r\n    switch (fieldToSort) {\r\n      case \"name.first\":\r\n        return employee.name.first\r\n      case \"name.last\":\r\n        return employee.name.last\r\n      default:\r\n        return employee[fieldToSort]\r\n    }\r\n  }\r\n  const updateSort = (field) => {\r\n    if (fieldToSort === field) {\r\n      setSortOrder(-sortOrder)\r\n    }\r\n    else setFieldToSort(field)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Title>Employee Directory</Title>\r\n      <SearchForm setNameFilter={setNameFilter} />\r\n      <div className=\"card container-fluid\">\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-striped \">\r\n            <thead>\r\n              <tr>\r\n                <th onClick={() => updateSort(\"name.first\")}>Name  <FontAwesomeIcon icon={faSort} /></th>\r\n                <th>Image</th>\r\n                <th>Phone Number</th>\r\n                <th onClick={() => updateSort(\"email\")}>Email <FontAwesomeIcon icon={faSort} /></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"tableRow content\">\r\n              {employees\r\n                .filter((employee) =>\r\n                  nameFilterRegExp.test(employee.name.first) ||\r\n                  nameFilterRegExp.test(employee.name.last) ||\r\n                  nameFilterRegExp.test(employee.email)\r\n                ).sort((employeeA, employeeB) => {\r\n                  const a = getField(employeeA)\r\n                  const b = getField(employeeB)\r\n                  if (a < b) {\r\n                    return sortOrder\r\n                  }\r\n                  if (a > b) {\r\n                    return -sortOrder\r\n                  }\r\n                  return 0\r\n                })\r\n                .map(employee => (\r\n                  <EmployeeCard\r\n                    name={employee.name.first + \" \" + employee.name.last}\r\n                    image={employee.image}\r\n                    phoneNumber={employee.phone}\r\n                    email={employee.email}\r\n                  />\r\n                ))}\r\n            </tbody>\r\n          </table >\r\n        </div>\r\n      </div >\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","import axios from \"axios\";\r\n\r\nexport const getPeople = (count = 20) => axios.get(\"https://randomuser.me/api/?nat=us&results=\" + count)","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}